{
  "hash": "ad641f7009823f6701caa59807948c2d",
  "result": {
    "markdown": "---\ntitle: \"Data Visualization Examples in Python\"\nauthor:\n  - name: Elke Windschitl\n    url: https://elkewind.github.io\ndescription: \"Using Python libraries to visualize data\"\nimage: \"python.jpg\"\ndate: 2023-08-19\ncategories: [Data Visualization, Python]\ncitation: \n  url: https://elkewind.github.io/posts/2023-08-19-python-viz\nformat: \n  html:\n    code-fold: true\ntoc: true\ndraft: false\npage-layout: full\n---\n\n## Visualizing Various Data Types from the kelpGeoMod Data Repository\n\nThis post uses data from the kelpGeoMod data repository and provides examples of data visualization in Python using Folium, Plotly, Matplotlib, and Rasterio.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import necessary libraries\n#| warning: false\nimport os\nimport pandas as pd\nimport numpy as np\nimport plotly.graph_objs as go\nimport geopandas as gpd\nimport folium\nfrom folium import DivIcon\nfrom IPython.display import display\nimport rasterio\nimport rasterio.plot\nimport matplotlib.pyplot as plt\nfrom rasterio.warp import transform_geom\nfrom matplotlib import rcParams\n```\n:::\n\n\n### Reading in the data:\n\nData for this notebook come from the kelpGeoMod [Google Drive](https://drive.google.com/drive/u/2/folders/1sJq_9RnsARR9mkmrcrn4O_1630VD-e-t) data repository. This data repository was created as a Bren Master of Environmental Data Science capstone project by Erika Egg, Jessica French, Javier Patr√≥n, and Elke Windschitl.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Setting the data directory path\ndata_dir = \"/Users/elkewindschitl/Documents/MEDS/kelpGeoMod/final-data\"\n\n# Reading in the area of interest shapefile\naoi_path = os.path.join(data_dir, \"02-intermediate-data/02-aoi-sbchannel-shapes-intermediate/aoi-sbchannel.shp\")\naoi = gpd.read_file(aoi_path)\n\n# Reading in the \"full synthesized\" data set\nfull_synth_path = os.path.join(data_dir, \"03-analysis-data/03-data-synthesization-analysis/full-synthesized.csv\")\n# Read the CSV file into a dataframe\nfull_synth_df = pd.read_csv(full_synth_path)\n\n# Reading in the \"observed nutrients\" data set\nobs_nutr_path = os.path.join(data_dir, \"03-analysis-data/03-data-synthesization-analysis/observed-nutrients-synthesized.csv\")\n# Read the CSV file into a dataframe\nobs_nutr_df = pd.read_csv(obs_nutr_path)\n\n# Setting path to depth raster\nraster_path = os.path.join(data_dir, \"02-intermediate-data/06-depth-intermediate/depth.tif\")\n```\n:::\n\n\n### The area of interest:\n\nThese data come from the Santa Barbara Channel between 2014-2022.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Reproject geometries to WGS84\naoi_84 = aoi.to_crs(epsg=4326)\n\n# Create a Folium map centered around the AOI\nm = folium.Map(location=[aoi_84['geometry'].centroid.y.mean(), aoi_84['geometry'].centroid.x.mean()], zoom_start=9, tiles='Stamen Terrain')\n\n# Define a function to set shape color based on properties\ndef style_function(feature):\n    return {\n        'fillColor': '#93C2E2', \n        'color': '#326587',\n        'weight': 4,\n        'fillOpacity': 0.6\n    }\n\n# Add GeoJSON data to the map with custom style\nfolium.GeoJson(aoi_84.to_json(), style_function=style_function).add_to(m)\n\n# Display the map\ndisplay(m)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><span style=\"color:#565656\">Make this Notebook Trusted to load map: File -> Trust Notebook</span><iframe srcdoc=\"&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    \n    &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;\n    \n        &lt;script&gt;\n            L_NO_TOUCH = false;\n            L_DISABLE_3D = false;\n        &lt;/script&gt;\n    \n    &lt;style&gt;html, body {width: 100%;height: 100%;margin: 0;padding: 0;}&lt;/style&gt;\n    &lt;style&gt;#map {position:absolute;top:0;bottom:0;right:0;left:0;}&lt;/style&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://code.jquery.com/jquery-1.12.4.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.js&quot;&gt;&lt;/script&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/leaflet@1.9.3/dist/leaflet.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6.2.0/css/all.min.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/Leaflet.awesome-markers/2.0.2/leaflet.awesome-markers.css&quot;/&gt;\n    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/python-visualization/folium/folium/templates/leaflet.awesome.rotate.min.css&quot;/&gt;\n    \n            &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,\n                initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;\n            &lt;style&gt;\n                #map_a586d5c28231b22a27a46e23b1ba0d0d {\n                    position: relative;\n                    width: 100.0%;\n                    height: 100.0%;\n                    left: 0.0%;\n                    top: 0.0%;\n                }\n                .leaflet-container { font-size: 1rem; }\n            &lt;/style&gt;\n        \n&lt;/head&gt;\n&lt;body&gt;\n    \n    \n            &lt;div class=&quot;folium-map&quot; id=&quot;map_a586d5c28231b22a27a46e23b1ba0d0d&quot; &gt;&lt;/div&gt;\n        \n&lt;/body&gt;\n&lt;script&gt;\n    \n    \n            var map_a586d5c28231b22a27a46e23b1ba0d0d = L.map(\n                &quot;map_a586d5c28231b22a27a46e23b1ba0d0d&quot;,\n                {\n                    center: [34.22, -119.725],\n                    crs: L.CRS.EPSG3857,\n                    zoom: 9,\n                    zoomControl: true,\n                    preferCanvas: false,\n                }\n            );\n\n            \n\n        \n    \n            var tile_layer_323b2b0fd02d9cc6c51cad916651b78f = L.tileLayer(\n                &quot;https://stamen-tiles-{s}.a.ssl.fastly.net/terrain/{z}/{x}/{y}.jpg&quot;,\n                {&quot;attribution&quot;: &quot;Map tiles by \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://stamen.com\\&quot;\\u003eStamen Design\\u003c/a\\u003e, under \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://creativecommons.org/licenses/by/3.0\\&quot;\\u003eCC BY 3.0\\u003c/a\\u003e. Data by \\u0026copy; \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://openstreetmap.org\\&quot;\\u003eOpenStreetMap\\u003c/a\\u003e, under \\u003ca target=\\&quot;_blank\\&quot; href=\\&quot;http://creativecommons.org/licenses/by-sa/3.0\\&quot;\\u003eCC BY SA\\u003c/a\\u003e.&quot;, &quot;detectRetina&quot;: false, &quot;maxNativeZoom&quot;: 18, &quot;maxZoom&quot;: 18, &quot;minZoom&quot;: 0, &quot;noWrap&quot;: false, &quot;opacity&quot;: 1, &quot;subdomains&quot;: &quot;abc&quot;, &quot;tms&quot;: false}\n            ).addTo(map_a586d5c28231b22a27a46e23b1ba0d0d);\n        \n    \n        function geo_json_3371ecf501d12736036ceae8f866c94c_styler(feature) {\n            switch(feature.id) {\n                default:\n                    return {&quot;color&quot;: &quot;#326587&quot;, &quot;fillColor&quot;: &quot;#93C2E2&quot;, &quot;fillOpacity&quot;: 0.6, &quot;weight&quot;: 4};\n            }\n        }\n\n        function geo_json_3371ecf501d12736036ceae8f866c94c_onEachFeature(feature, layer) {\n            layer.on({\n            });\n        };\n        var geo_json_3371ecf501d12736036ceae8f866c94c = L.geoJson(null, {\n                onEachFeature: geo_json_3371ecf501d12736036ceae8f866c94c_onEachFeature,\n            \n                style: geo_json_3371ecf501d12736036ceae8f866c94c_styler,\n        });\n\n        function geo_json_3371ecf501d12736036ceae8f866c94c_add (data) {\n            geo_json_3371ecf501d12736036ceae8f866c94c\n                .addData(data)\n                .addTo(map_a586d5c28231b22a27a46e23b1ba0d0d);\n        }\n            geo_json_3371ecf501d12736036ceae8f866c94c_add({&quot;features&quot;: [{&quot;geometry&quot;: {&quot;coordinates&quot;: [[[-120.65, 33.85], [-120.65, 34.59], [-118.8, 34.59], [-118.8, 33.85], [-120.65, 33.85]]], &quot;type&quot;: &quot;Polygon&quot;}, &quot;id&quot;: &quot;0&quot;, &quot;properties&quot;: {&quot;FID&quot;: 0}, &quot;type&quot;: &quot;Feature&quot;}], &quot;type&quot;: &quot;FeatureCollection&quot;});\n\n        \n&lt;/script&gt;\n&lt;/html&gt;\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>\n```\n:::\n:::\n\n\n### Visualizing kelp data:\n\nHere I use the \"full synthesized data set\" to visualize how kelp area in the region changes through time. First, I want to check out the data set.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Check the data frame\nprint(full_synth_df.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   year  quarter     lat      lon      depth        sst  kelp_area  \\\n0  2014        1  34.590 -120.646 -46.320492  14.016689        NaN   \n1  2014        1  34.582 -120.646 -42.287880  14.040511        NaN   \n2  2014        1  34.574 -120.646 -45.276779  14.059811        NaN   \n3  2014        1  34.566 -120.646 -54.458694  14.074700        NaN   \n4  2014        1  34.566 -120.638 -23.270111  14.067266        NaN   \n\n   kelp_biomass  nitrate_nitrite  phosphate  ammonium  \n0           NaN              NaN        NaN       NaN  \n1           NaN              NaN        NaN       NaN  \n2           NaN              NaN        NaN       NaN  \n3           NaN              NaN        NaN       NaN  \n4           NaN              NaN        NaN       NaN  \n```\n:::\n:::\n\n\nI need to do a little wrangling to get the sum of the kelp area for each year/quarter combination. Each row in this data set represents one grid cell at one quarter in one year originating from raster data (for more information on the data, see the kelpGeoMod [metadata](https://drive.google.com/drive/u/2/folders/1SNAff0L5p2M6L8HQB29cTtJT5qWeusgg) throughout the Google Drive).\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Combine year and quarter columns into a single datetime column\nfull_synth_df['Date'] = pd.to_datetime(full_synth_df['year'].astype(str) + '-Q' + full_synth_df['quarter'].astype(str))\n\n# Group by date and calculate the mean for specific columns and the sum for kelp_area\naggregation = {\n    'sst': 'mean',\n    'year': 'mean',\n    'quarter': 'mean',\n    'kelp_area': 'sum'  # Sum the kelp_area column\n}\nsum_kelp = full_synth_df.groupby('Date').agg(aggregation)\n\n# Reset index to move \"Season\" from index to a column\nsum_kelp = sum_kelp.reset_index()\n\n# Convert from m^2 to km^2 and round values\nsum_kelp['kelp_area'] = (sum_kelp['kelp_area'] / 1000000).round(2)\nsum_kelp['year'] = sum_kelp['year'].astype(int)\n\n# Define a custom function to generate the new column based on \"quarter\" and \"year\"\ndef generate_season(row):\n    quarter = row[\"quarter\"]\n    year = row[\"year\"]\n    \n    if quarter == 1:\n        return f\"Winter {year}\"\n    elif quarter == 2:\n        return f\"Spring {year}\"\n    elif quarter == 3:\n        return f\"Summer {year}\"\n    elif quarter == 4:\n        return f\"Fall {year}\"\n    else:\n        return \"Invalid Quarter\"\n    \n# Apply the custom function to create the new \"Season\" column\nsum_kelp[\"Season\"] = sum_kelp.apply(generate_season, axis=1)\n\n# Print the summarized dataframe\nprint(sum_kelp.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Date        sst  year  quarter  kelp_area       Season\n0 2014-01-01  14.916278  2014      1.0       1.23  Winter 2014\n1 2014-04-01  16.053795  2014      2.0       2.43  Spring 2014\n2 2014-07-01  19.865393  2014      3.0       2.15  Summer 2014\n3 2014-10-01  18.694880  2014      4.0       0.37    Fall 2014\n4 2015-01-01  16.293984  2015      1.0       0.40  Winter 2015\n```\n:::\n:::\n\n\nHere I show the kelp area over time with the help of Plotly!\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Calculate the overall range for y-axis based on kelp area data\ny_axis_range = [0, sum_kelp['kelp_area'].max() + 1]\n\n# Create the figure\nfig = go.Figure()\n\n# Plotting the Kelp Area data with custom color and line style\nfig.add_trace(go.Scatter(\n    x=sum_kelp.Date,\n    y=sum_kelp['kelp_area'],\n    mode='lines+markers',\n    name='',\n    line=dict(color='#BCD79D'),\n    marker=dict(size=8),\n    hovertemplate='Season: %{text}<br>Kelp Area: %{y} km¬≤'\n))\n\n# Update layout for interactivity\nfig.update_layout(\n    title='Kelp area is highly variable in the Santa Barbara Channel',\n    title_font=dict(family='Arial', size=22, color='white'),\n    title_x=0.5,\n    font=dict(family='Arial', size=14, color='white'),\n    xaxis=dict(title='Date', showgrid=True, gridcolor='rgba(211, 211, 211, 0.5)', showline=True, linewidth=1, linecolor='white'),\n    yaxis=dict(title='Total Kelp Area (km¬≤)', showgrid=False, showline=False, linewidth=1, linecolor='white', range=y_axis_range, tickmode='linear', dtick=1),\n    legend=dict(font=dict(size=14, color='white')),\n    plot_bgcolor='#333333',\n    paper_bgcolor='#333333',\n    height=600,\n    margin=dict(b=60)\n)\n\n# Update hover text with 'Season'\nfig.update_traces(\n    text=sum_kelp['Season'])\n\n# Show the interactive plot\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"d1530bb1-0953-40c8-a932-9b1a043eebd3\" class=\"plotly-graph-div\" style=\"height:600px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d1530bb1-0953-40c8-a932-9b1a043eebd3\")) {                    Plotly.newPlot(                        \"d1530bb1-0953-40c8-a932-9b1a043eebd3\",                        [{\"hovertemplate\":\"Season: %{text}<br>Kelp Area: %{y} km\\u00b2\",\"line\":{\"color\":\"#BCD79D\"},\"marker\":{\"size\":8},\"mode\":\"lines+markers\",\"name\":\"\",\"x\":[\"2014-01-01T00:00:00\",\"2014-04-01T00:00:00\",\"2014-07-01T00:00:00\",\"2014-10-01T00:00:00\",\"2015-01-01T00:00:00\",\"2015-04-01T00:00:00\",\"2015-07-01T00:00:00\",\"2015-10-01T00:00:00\",\"2016-01-01T00:00:00\",\"2016-04-01T00:00:00\",\"2016-07-01T00:00:00\",\"2016-10-01T00:00:00\",\"2017-01-01T00:00:00\",\"2017-04-01T00:00:00\",\"2017-07-01T00:00:00\",\"2017-10-01T00:00:00\",\"2018-01-01T00:00:00\",\"2018-04-01T00:00:00\",\"2018-07-01T00:00:00\",\"2018-10-01T00:00:00\",\"2019-01-01T00:00:00\",\"2019-04-01T00:00:00\",\"2019-07-01T00:00:00\",\"2019-10-01T00:00:00\",\"2020-01-01T00:00:00\",\"2020-04-01T00:00:00\",\"2020-07-01T00:00:00\",\"2020-10-01T00:00:00\",\"2021-01-01T00:00:00\",\"2021-04-01T00:00:00\",\"2021-07-01T00:00:00\",\"2021-10-01T00:00:00\",\"2022-01-01T00:00:00\",\"2022-04-01T00:00:00\",\"2022-07-01T00:00:00\",\"2022-10-01T00:00:00\"],\"y\":[1.23,2.43,2.15,0.37,0.4,5.69,4.67,0.06,1.37,5.01,2.8,1.57,0.81,3.38,3.48,1.0,1.98,7.99,4.06,0.09,0.4,2.76,2.48,0.49,0.78,3.7,5.25,1.33,1.93,4.11,2.97,1.01,0.93,3.43,2.7,1.57],\"type\":\"scatter\",\"text\":[\"Winter 2014\",\"Spring 2014\",\"Summer 2014\",\"Fall 2014\",\"Winter 2015\",\"Spring 2015\",\"Summer 2015\",\"Fall 2015\",\"Winter 2016\",\"Spring 2016\",\"Summer 2016\",\"Fall 2016\",\"Winter 2017\",\"Spring 2017\",\"Summer 2017\",\"Fall 2017\",\"Winter 2018\",\"Spring 2018\",\"Summer 2018\",\"Fall 2018\",\"Winter 2019\",\"Spring 2019\",\"Summer 2019\",\"Fall 2019\",\"Winter 2020\",\"Spring 2020\",\"Summer 2020\",\"Fall 2020\",\"Winter 2021\",\"Spring 2021\",\"Summer 2021\",\"Fall 2021\",\"Winter 2022\",\"Spring 2022\",\"Summer 2022\",\"Fall 2022\"]}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Kelp area is highly variable in the Santa Barbara Channel\",\"font\":{\"family\":\"Arial\",\"size\":22,\"color\":\"white\"},\"x\":0.5},\"font\":{\"family\":\"Arial\",\"size\":14,\"color\":\"white\"},\"xaxis\":{\"title\":{\"text\":\"Date\"},\"showgrid\":true,\"gridcolor\":\"rgba(211, 211, 211, 0.5)\",\"showline\":true,\"linewidth\":1,\"linecolor\":\"white\"},\"yaxis\":{\"title\":{\"text\":\"Total Kelp Area (km\\u00b2)\"},\"showgrid\":false,\"showline\":false,\"linewidth\":1,\"linecolor\":\"white\",\"range\":[0,8.99],\"tickmode\":\"linear\",\"dtick\":1},\"legend\":{\"font\":{\"size\":14,\"color\":\"white\"}},\"margin\":{\"b\":60},\"plot_bgcolor\":\"#333333\",\"paper_bgcolor\":\"#333333\",\"height\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('d1530bb1-0953-40c8-a932-9b1a043eebd3');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n### Visualizing nutrient data:\n\nNext I visualize the ocean nutrient data based on averages of the seasonal values over time with Plotly. Similarly, I needed to do a little wrangling first.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Check the data frame\nprint(obs_nutr_df.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   year  quarter       lat        lon      temp  nitrate  nitrite  \\\n0  2014        1  34.01032 -118.84232  14.90600   0.4000  0.08300   \n1  2015        1  34.45118 -120.52470  15.87580   0.3125  0.06225   \n2  2015        1  34.40263 -119.80203  16.32375   0.0500  0.03950   \n3  2015        1  34.27690 -120.02423  16.35700   0.0300  0.00900   \n4  2015        1  34.25833 -119.32373  16.01060   0.1525  0.12875   \n\n   nitrate_nitrite  phosphate  ammonium        sst nutrient_source  \\\n0          0.48300   0.376667  0.066667  15.950767         CalCOFI   \n1          0.37475   0.385000  0.125000  14.712589         CalCOFI   \n2          0.08950   0.385000  0.060000  14.730477         CalCOFI   \n3          0.03900   0.310000  0.010000  14.923833         CalCOFI   \n4          0.28125   0.567500  0.227500  14.923833         CalCOFI   \n\n        depth  kelp_area  kelp_biomass  \n0  -87.118073        NaN           NaN  \n1 -112.089943        NaN           NaN  \n2 -109.903297        NaN           NaN  \n3 -481.472626        NaN           NaN  \n4 -481.472626        NaN           NaN  \n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Combine year and quarter columns into a single datetime column\nobs_nutr_df['Date'] = pd.to_datetime(obs_nutr_df['year'].astype(str) + '-Q' + obs_nutr_df['quarter'].astype(str))\n\n# Define a custom function to generate the new column based on \"quarter\" and \"year\"\ndef generate_season(row):\n    quarter = row[\"quarter\"]\n    year = row[\"year\"]\n    \n    if quarter == 1:\n        return f\"Winter {year}\"\n    elif quarter == 2:\n        return f\"Spring {year}\"\n    elif quarter == 3:\n        return f\"Summer {year}\"\n    elif quarter == 4:\n        return f\"Fall {year}\"\n    else:\n        return \"Invalid Quarter\"\n    \n# Apply the custom function to create the new \"Season\" column\nobs_nutr_df[\"Season\"] = obs_nutr_df.apply(generate_season, axis=1)\n\n# Group by date and season, and calculate the mean for each column\nmean_nutr = obs_nutr_df.groupby(['Date', 'Season']).mean(numeric_only=True)\n\n# Reset index to move \"Season\" from index to a column\nmean_nutr = mean_nutr.reset_index()\n\n# Drop unused columns\nmean_nutr = mean_nutr.drop(['lat', 'lon', 'depth'], axis=1)\n\n# Print the summarized dataframe\nprint(mean_nutr.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        Date       Season    year  quarter       temp   nitrate   nitrite  \\\n0 2014-01-01  Winter 2014  2014.0      1.0  14.312260  0.588876  0.119150   \n1 2014-04-01  Spring 2014  2014.0      2.0  13.987199  2.369880  0.104520   \n2 2014-07-01  Summer 2014  2014.0      3.0  18.531475  0.092371  0.060429   \n3 2014-10-01    Fall 2014  2014.0      4.0  18.146190  0.106062  0.074262   \n4 2015-01-01  Winter 2015  2015.0      1.0  15.701622  0.131579  0.071911   \n\n   nitrate_nitrite  phosphate  ammonium        sst     kelp_area  \\\n0         1.264658   0.339080  0.387688  18.450691   7879.809524   \n1         2.200509   0.349068  0.370103  15.902271  10447.044944   \n2         0.178743   0.178004  0.169410  15.868604   8951.882353   \n3         0.237076   0.251334  0.285495  14.606426  16152.435644   \n4         0.519048   0.334001  0.193615  17.157000  10833.866667   \n\n    kelp_biomass  \n0   61283.412698  \n1   83235.258427  \n2   71077.823529  \n3  121647.386139  \n4   81012.066667  \n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Calculate the overall range for y-axis that covers all nutrient data\ny_axis_range = [0, mean_nutr[['nitrate', 'nitrite', 'phosphate', 'ammonium']].max().max() + 0.5]\n\n# Create the figure\nfig = go.Figure()\n\n# Plotting the data with custom colors and line styles\nfig.add_trace(go.Scatter(\n    x=mean_nutr.Date,\n    y=mean_nutr['nitrate'],\n    mode='lines+markers',\n    name='Nitrate',\n    line=dict(color='#D28077'),\n    hovertemplate='Season: %{text}<br>Concentration: %{y:.2f} Œºmol/L',\n))\nfig.add_trace(go.Scatter(\n    x=mean_nutr.Date,\n    y=mean_nutr['nitrite'],\n    mode='lines+markers',\n    name='Nitrite',\n    line=dict(color='#93C2E2'),\n    hovertemplate='Season: %{text}<br>Concentration: %{y:.2f} Œºmol/L'\n))\nfig.add_trace(go.Scatter(\n    x=mean_nutr.Date,\n    y=mean_nutr['phosphate'],\n    mode='lines+markers',\n    name='Phosphate',\n    line=dict(color='#BCD79D'),\n    hovertemplate='Season: %{text}<br>Concentration: %{y:.2f} Œºmol/L'\n))\nfig.add_trace(go.Scatter(\n    x=mean_nutr.Date,\n    y=mean_nutr['ammonium'],\n    mode='lines+markers',\n    name='Ammonium',\n    line=dict(color='#036554'),\n    hovertemplate='Season: %{text}<br>Concentration: %{y:.2f} Œºmol/L'\n))\n\n# Update layout for interactivity\nfig.update_layout(\n    title='Nutrient concentrations trend higher in winter and spring and lower in summer and fall',\n    title_font=dict(family='Arial', size=22, color='white'),\n    title_x=0.5,\n    font=dict(family='Arial', size=14, color='white'),\n    xaxis=dict(title='Time', showgrid=True, gridcolor='rgba(211, 211, 211, 0.5)', showline=True, linewidth=1, linecolor='white'),\n    yaxis=dict(title='Average Concentration (Œºmol/L)', showgrid=False, showline=False, linewidth=1, linecolor='white', range=y_axis_range, tickmode='linear', dtick=1),\n    legend=dict(font=dict(size=14, color='white')),\n    plot_bgcolor='#333333',\n    paper_bgcolor='#333333',\n    height=600\n)\n\n# Update hover text with 'Season'\nfig.update_traces(\n    text=mean_nutr['Season']\n)\n\n# Show the interactive plot\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"22d1c7ba-9e5d-4569-993c-5482cf63a989\" class=\"plotly-graph-div\" style=\"height:600px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"22d1c7ba-9e5d-4569-993c-5482cf63a989\")) {                    Plotly.newPlot(                        \"22d1c7ba-9e5d-4569-993c-5482cf63a989\",                        [{\"hovertemplate\":\"Season: %{text}<br>Concentration: %{y:.2f} \\u03bcmol/L\",\"line\":{\"color\":\"#D28077\"},\"mode\":\"lines+markers\",\"name\":\"Nitrate\",\"x\":[\"2014-01-01T00:00:00\",\"2014-04-01T00:00:00\",\"2014-07-01T00:00:00\",\"2014-10-01T00:00:00\",\"2015-01-01T00:00:00\",\"2015-04-01T00:00:00\",\"2015-07-01T00:00:00\",\"2015-10-01T00:00:00\",\"2016-01-01T00:00:00\",\"2016-04-01T00:00:00\",\"2016-07-01T00:00:00\",\"2016-10-01T00:00:00\",\"2017-01-01T00:00:00\",\"2017-04-01T00:00:00\",\"2017-07-01T00:00:00\",\"2017-10-01T00:00:00\",\"2018-01-01T00:00:00\",\"2018-04-01T00:00:00\",\"2018-07-01T00:00:00\",\"2018-10-01T00:00:00\",\"2019-01-01T00:00:00\",\"2019-04-01T00:00:00\",\"2019-07-01T00:00:00\",\"2019-10-01T00:00:00\",\"2020-01-01T00:00:00\",\"2020-07-01T00:00:00\",\"2020-10-01T00:00:00\",\"2021-01-01T00:00:00\",\"2021-04-01T00:00:00\",\"2021-07-01T00:00:00\",\"2021-10-01T00:00:00\",\"2022-01-01T00:00:00\",\"2022-04-01T00:00:00\",\"2022-07-01T00:00:00\",\"2022-10-01T00:00:00\"],\"y\":[0.588876404494382,2.3698797250859105,0.09237113402061857,0.1060618556701031,0.13157894736842105,1.6623814432989692,0.09874479166666666,0.12932456140350876,0.721921875,1.9784553264604812,0.38671006944444447,0.6751288659793814,1.5575945017182131,4.146620274914089,0.31182474226804124,0.26390034364261167,1.2370430107526882,3.554457142857143,0.10272727272727274,0.2526579861111111,1.1163888888888889,2.730970790378007,0.44648437500000004,0.3600257731958763,0.7717592592592593,null,null,null,null,null,null,null,null,null,null],\"type\":\"scatter\",\"text\":[\"Winter 2014\",\"Spring 2014\",\"Summer 2014\",\"Fall 2014\",\"Winter 2015\",\"Spring 2015\",\"Summer 2015\",\"Fall 2015\",\"Winter 2016\",\"Spring 2016\",\"Summer 2016\",\"Fall 2016\",\"Winter 2017\",\"Spring 2017\",\"Summer 2017\",\"Fall 2017\",\"Winter 2018\",\"Spring 2018\",\"Summer 2018\",\"Fall 2018\",\"Winter 2019\",\"Spring 2019\",\"Summer 2019\",\"Fall 2019\",\"Winter 2020\",\"Summer 2020\",\"Fall 2020\",\"Winter 2021\",\"Spring 2021\",\"Summer 2021\",\"Fall 2021\",\"Winter 2022\",\"Spring 2022\",\"Summer 2022\",\"Fall 2022\"]},{\"hovertemplate\":\"Season: %{text}<br>Concentration: %{y:.2f} \\u03bcmol/L\",\"line\":{\"color\":\"#93C2E2\"},\"mode\":\"lines+markers\",\"name\":\"Nitrite\",\"x\":[\"2014-01-01T00:00:00\",\"2014-04-01T00:00:00\",\"2014-07-01T00:00:00\",\"2014-10-01T00:00:00\",\"2015-01-01T00:00:00\",\"2015-04-01T00:00:00\",\"2015-07-01T00:00:00\",\"2015-10-01T00:00:00\",\"2016-01-01T00:00:00\",\"2016-04-01T00:00:00\",\"2016-07-01T00:00:00\",\"2016-10-01T00:00:00\",\"2017-01-01T00:00:00\",\"2017-04-01T00:00:00\",\"2017-07-01T00:00:00\",\"2017-10-01T00:00:00\",\"2018-01-01T00:00:00\",\"2018-04-01T00:00:00\",\"2018-07-01T00:00:00\",\"2018-10-01T00:00:00\",\"2019-01-01T00:00:00\",\"2019-04-01T00:00:00\",\"2019-07-01T00:00:00\",\"2019-10-01T00:00:00\",\"2020-01-01T00:00:00\",\"2020-07-01T00:00:00\",\"2020-10-01T00:00:00\",\"2021-01-01T00:00:00\",\"2021-04-01T00:00:00\",\"2021-07-01T00:00:00\",\"2021-10-01T00:00:00\",\"2022-01-01T00:00:00\",\"2022-04-01T00:00:00\",\"2022-07-01T00:00:00\",\"2022-10-01T00:00:00\"],\"y\":[0.11915013333333334,0.10452004611111111,0.06042868444444444,0.07426215222142858,0.07191060628571429,0.10346857801149426,0.04099621212121212,0.0863197619047619,0.16995844444444444,0.11999384615384615,0.06881818181818182,0.08960733333333332,0.12854895833333332,0.14504418894047616,0.05097224494555555,0.06612671316666666,0.03180414713725489,0.12827524285087719,null,0.026047107466666657,0.1845833333333333,0.16365375480246913,0.0539658923076923,0.025284741736111088,0.04322222222222221,null,null,null,0.121,0.01933333333333333,0.12766666666666665,null,null,null,0.22601386683333333],\"type\":\"scatter\",\"text\":[\"Winter 2014\",\"Spring 2014\",\"Summer 2014\",\"Fall 2014\",\"Winter 2015\",\"Spring 2015\",\"Summer 2015\",\"Fall 2015\",\"Winter 2016\",\"Spring 2016\",\"Summer 2016\",\"Fall 2016\",\"Winter 2017\",\"Spring 2017\",\"Summer 2017\",\"Fall 2017\",\"Winter 2018\",\"Spring 2018\",\"Summer 2018\",\"Fall 2018\",\"Winter 2019\",\"Spring 2019\",\"Summer 2019\",\"Fall 2019\",\"Winter 2020\",\"Summer 2020\",\"Fall 2020\",\"Winter 2021\",\"Spring 2021\",\"Summer 2021\",\"Fall 2021\",\"Winter 2022\",\"Spring 2022\",\"Summer 2022\",\"Fall 2022\"]},{\"hovertemplate\":\"Season: %{text}<br>Concentration: %{y:.2f} \\u03bcmol/L\",\"line\":{\"color\":\"#BCD79D\"},\"mode\":\"lines+markers\",\"name\":\"Phosphate\",\"x\":[\"2014-01-01T00:00:00\",\"2014-04-01T00:00:00\",\"2014-07-01T00:00:00\",\"2014-10-01T00:00:00\",\"2015-01-01T00:00:00\",\"2015-04-01T00:00:00\",\"2015-07-01T00:00:00\",\"2015-10-01T00:00:00\",\"2016-01-01T00:00:00\",\"2016-04-01T00:00:00\",\"2016-07-01T00:00:00\",\"2016-10-01T00:00:00\",\"2017-01-01T00:00:00\",\"2017-04-01T00:00:00\",\"2017-07-01T00:00:00\",\"2017-10-01T00:00:00\",\"2018-01-01T00:00:00\",\"2018-04-01T00:00:00\",\"2018-07-01T00:00:00\",\"2018-10-01T00:00:00\",\"2019-01-01T00:00:00\",\"2019-04-01T00:00:00\",\"2019-07-01T00:00:00\",\"2019-10-01T00:00:00\",\"2020-01-01T00:00:00\",\"2020-07-01T00:00:00\",\"2020-10-01T00:00:00\",\"2021-01-01T00:00:00\",\"2021-04-01T00:00:00\",\"2021-07-01T00:00:00\",\"2021-10-01T00:00:00\",\"2022-01-01T00:00:00\",\"2022-04-01T00:00:00\",\"2022-07-01T00:00:00\",\"2022-10-01T00:00:00\"],\"y\":[0.3390796,0.3490675163015873,0.178004362647619,0.25133448405387204,0.3340006494152047,0.38984679035947717,0.21010432098765433,0.3124158249158249,0.5962361111111111,0.46243942652329756,0.2304831275720165,0.3019011111111111,0.3958333333333333,0.5242362527474748,0.19194736707843135,0.22789728409523813,0.2713909252171718,0.5164319720956072,0.10630222222222233,0.29618089644444445,0.4374527777777778,0.5364265423125,0.22032679969658123,0.19132196777777777,0.2859738095238096,0.2265572222222223,0.27719190995555565,0.5837055555555556,0.5727507407407407,0.22818111111111106,0.3355518518518519,0.5726122222222222,0.2827566666666666,0.2342883333333332,0.6555565649999999],\"type\":\"scatter\",\"text\":[\"Winter 2014\",\"Spring 2014\",\"Summer 2014\",\"Fall 2014\",\"Winter 2015\",\"Spring 2015\",\"Summer 2015\",\"Fall 2015\",\"Winter 2016\",\"Spring 2016\",\"Summer 2016\",\"Fall 2016\",\"Winter 2017\",\"Spring 2017\",\"Summer 2017\",\"Fall 2017\",\"Winter 2018\",\"Spring 2018\",\"Summer 2018\",\"Fall 2018\",\"Winter 2019\",\"Spring 2019\",\"Summer 2019\",\"Fall 2019\",\"Winter 2020\",\"Summer 2020\",\"Fall 2020\",\"Winter 2021\",\"Spring 2021\",\"Summer 2021\",\"Fall 2021\",\"Winter 2022\",\"Spring 2022\",\"Summer 2022\",\"Fall 2022\"]},{\"hovertemplate\":\"Season: %{text}<br>Concentration: %{y:.2f} \\u03bcmol/L\",\"line\":{\"color\":\"#036554\"},\"mode\":\"lines+markers\",\"name\":\"Ammonium\",\"x\":[\"2014-01-01T00:00:00\",\"2014-04-01T00:00:00\",\"2014-07-01T00:00:00\",\"2014-10-01T00:00:00\",\"2015-01-01T00:00:00\",\"2015-04-01T00:00:00\",\"2015-07-01T00:00:00\",\"2015-10-01T00:00:00\",\"2016-01-01T00:00:00\",\"2016-04-01T00:00:00\",\"2016-07-01T00:00:00\",\"2016-10-01T00:00:00\",\"2017-01-01T00:00:00\",\"2017-04-01T00:00:00\",\"2017-07-01T00:00:00\",\"2017-10-01T00:00:00\",\"2018-01-01T00:00:00\",\"2018-04-01T00:00:00\",\"2018-07-01T00:00:00\",\"2018-10-01T00:00:00\",\"2019-01-01T00:00:00\",\"2019-04-01T00:00:00\",\"2019-07-01T00:00:00\",\"2019-10-01T00:00:00\",\"2020-01-01T00:00:00\",\"2020-07-01T00:00:00\",\"2020-10-01T00:00:00\",\"2021-01-01T00:00:00\",\"2021-04-01T00:00:00\",\"2021-07-01T00:00:00\",\"2021-10-01T00:00:00\",\"2022-01-01T00:00:00\",\"2022-04-01T00:00:00\",\"2022-07-01T00:00:00\",\"2022-10-01T00:00:00\"],\"y\":[0.387687962962963,0.3701027777777778,0.16940952380952382,0.2854948412698413,0.1936148148148148,0.3266174603174606,0.09818504273504272,0.18341249999999998,0.2806756410256411,0.562609126984127,0.17632051282051286,0.3433492063492066,0.4946166666666662,0.32069102564102536,0.17406468253968257,0.1401916666666667,0.24080777777777743,0.43676085858585856,0.5015200000000002,0.10884888888888886,0.31633555555555554,0.382009126984127,0.21324487179487184,0.12491407407407405,0.042904761904761876,0.06725111111111107,0.2490477777777778,0.39777222222222236,0.7222588888888888,0.2349266666666668,0.34009666666666677,0.25026555555555563,0.7664377777777769,0.26064499999999996,null],\"type\":\"scatter\",\"text\":[\"Winter 2014\",\"Spring 2014\",\"Summer 2014\",\"Fall 2014\",\"Winter 2015\",\"Spring 2015\",\"Summer 2015\",\"Fall 2015\",\"Winter 2016\",\"Spring 2016\",\"Summer 2016\",\"Fall 2016\",\"Winter 2017\",\"Spring 2017\",\"Summer 2017\",\"Fall 2017\",\"Winter 2018\",\"Spring 2018\",\"Summer 2018\",\"Fall 2018\",\"Winter 2019\",\"Spring 2019\",\"Summer 2019\",\"Fall 2019\",\"Winter 2020\",\"Summer 2020\",\"Fall 2020\",\"Winter 2021\",\"Spring 2021\",\"Summer 2021\",\"Fall 2021\",\"Winter 2022\",\"Spring 2022\",\"Summer 2022\",\"Fall 2022\"]}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Nutrient concentrations trend higher in winter and spring and lower in summer and fall\",\"font\":{\"family\":\"Arial\",\"size\":22,\"color\":\"white\"},\"x\":0.5},\"font\":{\"family\":\"Arial\",\"size\":14,\"color\":\"white\"},\"xaxis\":{\"title\":{\"text\":\"Time\"},\"showgrid\":true,\"gridcolor\":\"rgba(211, 211, 211, 0.5)\",\"showline\":true,\"linewidth\":1,\"linecolor\":\"white\"},\"yaxis\":{\"title\":{\"text\":\"Average Concentration (\\u03bcmol/L)\"},\"showgrid\":false,\"showline\":false,\"linewidth\":1,\"linecolor\":\"white\",\"range\":[0,4.646620274914089],\"tickmode\":\"linear\",\"dtick\":1},\"legend\":{\"font\":{\"size\":14,\"color\":\"white\"}},\"plot_bgcolor\":\"#333333\",\"paper_bgcolor\":\"#333333\",\"height\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('22d1c7ba-9e5d-4569-993c-5482cf63a989');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\nI want to more closely look at average nutrient concentrations during the el Ni√±o year 2016.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Filter for the year 2016\nfiltered_2016 = mean_nutr[mean_nutr['year'] == 2016]\n\n# Calculate the average nutrient concentrations\naverage_2016 = filtered_2016[['nitrate', 'nitrite', 'ammonium', 'phosphate']].agg('mean')\n\n# Create a DataFrame with 'Nutrient' and 'Concentration' columns\naverage_2016 = pd.DataFrame({'Nutrient': average_2016.index, 'Concentration': average_2016.values})\n\n# Create the bar chart\nfig, ax = plt.subplots(figsize=(9.3, 6))  # Adjusted figsize\nax.set_facecolor('#333333')  # Set the background color for the plotting area\n\ncolors = ['#D28077', '#93C2E2', '#036554', '#BCD79D']\n\nbars = ax.bar(average_2016['Nutrient'], average_2016['Concentration'], color=colors)\nax.set_xlabel('Nutrient', color='white', fontname='Arial', size = 11, labelpad = 10)\nax.set_ylabel('Average Concentration (Œºmol/L)', color='white', fontname='Arial', size = 11, labelpad = 10)\n\n# Adjusted title font size (no bold)\nax.set_title('Average Nutrient Concentrations in 2016', color='white', fontname='Arial', fontsize=16)\n\nax.tick_params(axis='x', rotation=0, colors='white')\nax.tick_params(axis='y', colors='white')\n\n# Add value labels on top of the bars\nfor bar in bars:\n    yval = bar.get_height()\n    ax.text(bar.get_x() + bar.get_width()/2, yval + 0.01, round(yval, 2), ha='center', color='white', fontsize=10, fontname='Arial')\n\n# Adding white grid lines\nax.yaxis.grid(color='white', linestyle='--', linewidth=0.5)\n\n# Moving grid lines behind the data\nax.set_axisbelow(True)\n\n# Adding white spines (lines along the axes)\nax.spines['bottom'].set_color('white')\nax.spines['left'].set_color('white')\n\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-11-output-1.png){width=883 height=567}\n:::\n:::\n\n\n### Visualizing depth data:\n\nNext, I want to get a better understanding of ocean depth in the channel. Here I create a histogram of depths. First, though, I will need to average the depth over all time periods grouped by lat and lon. This is because depth remains constant over all years and is thus duplicated in the data set. However, I do not want duplicates in the histogram.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Group by \"lat\" and \"lon\" and calculate the average of the \"depth\" column\ngrouped_data = full_synth_df.groupby(['lat', 'lon'])['depth'].mean().round()\n\n# Because some grid cells overlap with land, the value is greater than zero, but I want to ceiling the data at zero.\n# Convert the grouped data back to a DataFrame\ngrouped_df = grouped_data.reset_index()\n# Replace values greater than zero with zero in the \"depth\" column\ngrouped_df['depth'] = -1 * grouped_df['depth'].apply(lambda x: 0 if x > 0 else x)\n\n# Print the modified DataFrame\nprint(grouped_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          lat      lon   depth\n0      33.854 -120.646  1971.0\n1      33.854 -120.638  1954.0\n2      33.854 -120.630  1942.0\n3      33.854 -120.622  1931.0\n4      33.854 -120.614  1923.0\n...       ...      ...     ...\n13511  34.566 -120.646    54.0\n13512  34.566 -120.638    23.0\n13513  34.574 -120.646    45.0\n13514  34.582 -120.646    42.0\n13515  34.590 -120.646    46.0\n\n[13516 rows x 3 columns]\n```\n:::\n:::\n\n\nHere I visualize the depth data in a histogram with plotly! Again, this data was originally in the form of a raster, so each measurement of depth represents a 0.008¬∞ x 0.008¬∞ grid cell.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Calculate the histogram manually\nhist, bins = np.histogram(grouped_df.depth, bins=range(0, int(grouped_df['depth'].max()) + 1, 50))\nbin_centers = bins[:-1] + (bins[1] - bins[0]) / 2\nbin_ranges = [f'Range: {bins[i]}-{bins[i + 1] - 1} m' for i in range(len(bins) - 1)]\nhover_text = [f'{bin_ranges[i]}<br>Count: {hist[i]}' for i in range(len(bins) - 1)]\n\n\n# Create the plot\nfig = go.Figure()\n\n# Plotting the data with custom colors and line styles\nfig.add_trace(go.Bar(\n    x=bin_centers,\n    y=hist,\n    hovertext=hover_text,\n    hoverinfo='text',\n    width=bins[1] - bins[0],\n    marker_color='#02a8c9',\n    marker_line=dict(color='rgba(211, 211, 211, 0.5)', width=1)\n))\n\n# Update layout for interactivity\nfig.update_layout(\n    xaxis_title='Average Depth (m)',\n    yaxis_title='Frequency',\n    title='Histogram of Depths in the Santa Barbara Channel',\n    title_font=dict(family='Arial', size=22, color='white'),\n    font=dict(family='Arial', size=14, color='white'),\n    xaxis=dict(showgrid=False, showline=False, linewidth=1, linecolor='white'),\n    yaxis=dict(showgrid=True, gridcolor='rgba(211, 211, 211, 0.5)', showline=False, linewidth=1, linecolor='white'),\n    plot_bgcolor='#333333',\n    paper_bgcolor='#333333',\n    height=600,\n    title_x=0.5,\n    annotations=[\n        dict(\n            x=0.5,\n            y=1.08,\n            showarrow=False,\n            text=\"where every data point represents 0.008¬∞ x 0.008¬∞ (approximately 1 km)\",\n            xref=\"paper\",\n            yref=\"paper\",\n            font=dict(family='Arial', size=14, color='white')\n        )\n    ]\n)\n\n# Show the interactive plot\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"dad5ad84-3a09-4b2b-b8c1-080f7db11934\" class=\"plotly-graph-div\" style=\"height:600px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"dad5ad84-3a09-4b2b-b8c1-080f7db11934\")) {                    Plotly.newPlot(                        \"dad5ad84-3a09-4b2b-b8c1-080f7db11934\",                        [{\"hoverinfo\":\"text\",\"hovertext\":[\"Range: 0-49 m<br>Count: 396\",\"Range: 50-99 m<br>Count: 2323\",\"Range: 100-149 m<br>Count: 2364\",\"Range: 150-199 m<br>Count: 674\",\"Range: 200-249 m<br>Count: 600\",\"Range: 250-299 m<br>Count: 758\",\"Range: 300-349 m<br>Count: 482\",\"Range: 350-399 m<br>Count: 486\",\"Range: 400-449 m<br>Count: 533\",\"Range: 450-499 m<br>Count: 688\",\"Range: 500-549 m<br>Count: 813\",\"Range: 550-599 m<br>Count: 642\",\"Range: 600-649 m<br>Count: 463\",\"Range: 650-699 m<br>Count: 151\",\"Range: 700-749 m<br>Count: 176\",\"Range: 750-799 m<br>Count: 239\",\"Range: 800-849 m<br>Count: 311\",\"Range: 850-899 m<br>Count: 381\",\"Range: 900-949 m<br>Count: 327\",\"Range: 950-999 m<br>Count: 46\",\"Range: 1000-1049 m<br>Count: 45\",\"Range: 1050-1099 m<br>Count: 33\",\"Range: 1100-1149 m<br>Count: 41\",\"Range: 1150-1199 m<br>Count: 38\",\"Range: 1200-1249 m<br>Count: 63\",\"Range: 1250-1299 m<br>Count: 57\",\"Range: 1300-1349 m<br>Count: 38\",\"Range: 1350-1399 m<br>Count: 28\",\"Range: 1400-1449 m<br>Count: 33\",\"Range: 1450-1499 m<br>Count: 32\",\"Range: 1500-1549 m<br>Count: 34\",\"Range: 1550-1599 m<br>Count: 27\",\"Range: 1600-1649 m<br>Count: 36\",\"Range: 1650-1699 m<br>Count: 36\",\"Range: 1700-1749 m<br>Count: 37\",\"Range: 1750-1799 m<br>Count: 30\",\"Range: 1800-1849 m<br>Count: 23\",\"Range: 1850-1899 m<br>Count: 20\",\"Range: 1900-1949 m<br>Count: 9\"],\"marker\":{\"color\":\"#02a8c9\",\"line\":{\"color\":\"rgba(211, 211, 211, 0.5)\",\"width\":1}},\"width\":50,\"x\":[25.0,75.0,125.0,175.0,225.0,275.0,325.0,375.0,425.0,475.0,525.0,575.0,625.0,675.0,725.0,775.0,825.0,875.0,925.0,975.0,1025.0,1075.0,1125.0,1175.0,1225.0,1275.0,1325.0,1375.0,1425.0,1475.0,1525.0,1575.0,1625.0,1675.0,1725.0,1775.0,1825.0,1875.0,1925.0],\"y\":[396,2323,2364,674,600,758,482,486,533,688,813,642,463,151,176,239,311,381,327,46,45,33,41,38,63,57,38,28,33,32,34,27,36,36,37,30,23,20,9],\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Histogram of Depths in the Santa Barbara Channel\",\"font\":{\"family\":\"Arial\",\"size\":22,\"color\":\"white\"},\"x\":0.5},\"font\":{\"family\":\"Arial\",\"size\":14,\"color\":\"white\"},\"xaxis\":{\"title\":{\"text\":\"Average Depth (m)\"},\"showgrid\":false,\"showline\":false,\"linewidth\":1,\"linecolor\":\"white\"},\"yaxis\":{\"title\":{\"text\":\"Frequency\"},\"showgrid\":true,\"gridcolor\":\"rgba(211, 211, 211, 0.5)\",\"showline\":false,\"linewidth\":1,\"linecolor\":\"white\"},\"plot_bgcolor\":\"#333333\",\"paper_bgcolor\":\"#333333\",\"height\":600,\"annotations\":[{\"font\":{\"color\":\"white\",\"family\":\"Arial\",\"size\":14},\"showarrow\":false,\"text\":\"where every data point represents 0.008\\u00b0 x 0.008\\u00b0 (approximately 1 km)\",\"x\":0.5,\"xref\":\"paper\",\"y\":1.08,\"yref\":\"paper\"}]},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('dad5ad84-3a09-4b2b-b8c1-080f7db11934');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\nHere is the depth data as a raster layer.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Set the font family for the entire plot\nrcParams['font.family'] = 'sans-serif'\nrcParams['font.sans-serif'] = ['Arial']  # Use Arial font or another available sans-serif font\n\n# Customize the figure background color, axes background color, and text color\nrcParams['figure.figsize'] = (10, 8)  # Set the figure size (width, height) in inches\nrcParams['figure.facecolor'] = '#333333'   # Set background color of the figure\nrcParams['axes.edgecolor'] = '#333333'       # Set color of axes lines to white\nrcParams['axes.labelcolor'] = 'white'      # Set color of axes labels to white\nrcParams['xtick.color'] = 'white'          # Set color of x-axis ticks to white\nrcParams['ytick.color'] = 'white'          # Set color of y-axis ticks to white\nrcParams['text.color'] = 'white'           # Set text color to white\n\n# Open the raster file using rasterio\nwith rasterio.open(raster_path) as src:\n    # Set up colormap and normalization\n    cmap = plt.cm.Blues_r # Reverse the Blues colormap\n    cmap.set_bad(color='#333333')  # Set NaN values to be white\n    norm = plt.Normalize(vmin=-1000, vmax=20)\n\n    # Create a larger figure\n    plt.figure(figsize=(10.5, 8.5))\n    # Add \"Latitude\" and \"Longitude\" labels using plt.text\n    plt.text(0.5, -0.16, 'Longitude', transform=plt.gca().transAxes,\n             ha='center', color='white')\n    plt.text(-0.1, 0.5, 'Latitude', transform=plt.gca().transAxes,\n             va='center', rotation='vertical', color='white')\n\n    # Plot the raster data using rasterio's show function\n    rasterio.plot.show(src,\n                       cmap=cmap,\n                       norm=norm,\n                       title='Depth in the Santa Barbara Channel',\n                       origin='upper')\n                      \n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-14-output-1.png){width=879 height=406}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.16.1.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        \n"
      ]
    }
  }
}